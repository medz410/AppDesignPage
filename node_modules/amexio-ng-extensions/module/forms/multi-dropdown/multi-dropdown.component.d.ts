import { ChangeDetectorRef, ElementRef, OnInit, Renderer2, TemplateRef } from '@angular/core';
import { ControlValueAccessor, FormControl, Validators } from '@angular/forms';
import { DisplayFieldService } from '../../services/data/display.field.service';
import { CommonDataService } from '../../services/data/common.data.service';
import { EventBaseComponent } from './event.base.component';
import { MultiChildDropdownComponent } from '../multi-dropdown/multi-child-dropdown/multi-child-dropdown.component';
export declare class AmexioMultiDropDownComponent extends EventBaseComponent<any> implements OnInit, ControlValueAccessor, Validators {
    dataService: CommonDataService;
    private displayFieldService;
    element: ElementRef;
    renderer: Renderer2;
    fieldlabel: string;
    allowblank: boolean;
    childArrayKey: string;
    _data: any;
    componentLoaded: boolean;
    parentIndex: number;
    data: any;
    datareader: string;
    httpmethod: string;
    group: boolean;
    httpurl: string;
    displayfield: string;
    valuefield: string;
    search: boolean;
    readonly: boolean;
    multiselect: boolean;
    dropdownitems: ElementRef;
    displayValue: string;
    filteredOptions: any[];
    selectAllFlag: boolean;
    filterText: any;
    mainIndex: number;
    onBlur: any;
    input: any;
    focus: any;
    onSingleSelect: any;
    onRecordSelect: any;
    onMultiSelect: any;
    onClick: any;
    showToolTip: boolean;
    placeholder: string;
    disabled: boolean;
    iconfeedback: boolean;
    fontstyle: string;
    fontfamily: string;
    fontsize: string;
    haslabel: boolean;
    enablepopover: boolean;
    enablesort: boolean;
    isDataFound: boolean;
    sort: string;
    enablecheckbox: boolean;
    helpInfoMsg: string;
    _errormsg: string;
    count: number;
    findIndex: number;
    errormsg: string;
    bodyTemplate: TemplateRef<any>;
    posixUp: boolean;
    status: boolean;
    isValid: boolean;
    selectedindex: number;
    responseData: any;
    previousData: any;
    dropdownData: any;
    viewData: any;
    componentId: string;
    multiselectValues: any[];
    maskloader: boolean;
    activedescendant: string;
    key: string;
    childRef: MultiChildDropdownComponent;
    isComponentValid: any;
    name: string;
    constructor(dataService: CommonDataService, displayFieldService: DisplayFieldService, element: ElementRef, renderer: Renderer2, _cd: ChangeDetectorRef);
    ngOnInit(): void;
    setData(httpResponse: any): void;
    setResponseData(responsedata: any): void;
    setHover(): void;
    sortDataAscending(data: any): void;
    sortDataDescending(data: any): void;
    generateIndex(data: any, parentId: number, rannumber: any): void;
    setUserSelection(): void;
    onItemSelectdata(selectedItem: any): void;
    onDropDownClick(event: any): void;
    keyDownFocusOnNode(index: any, data: any): void;
    sethideFocus(focuselement: any, nextIndex: any): void;
    hideUpFocus(data: any, index: any): void;
    keyUpFocusOnNode(index: any, data: any): void;
    hideFocus(data: any, index: any): void;
    setFocus(focuselement: any, prevIndex: any): void;
    onArrowUp(): void;
    setfocusToLast(data: any, lastIndex: any): void;
    removeFocusFromLast(data: any, lastIndex: any): void;
    onArrowDown1(): void;
    multiSelection(): void;
    generateScroll(index: any): void;
    focusToLast(event: any): void;
    filterData(): void;
    searchTree(data: any[], matchingTitle: string): any;
    filterActualData(data: any[], matchingTitle: any): any;
    onDropDownSearchKeyUp(event: any): void;
    backSpaceEvent(event: any): void;
    resetAll(data: any): void;
    getChildData(childData: any): void;
    writeValue(value: any): void;
    findingChild(row: any, value: any): void;
    writeChangedValue(value: any): void;
    fromWriteChangedValue(value: any): void;
    value: any;
    onblur(event: any): void;
    onFocus(elem: any): void;
    getListPosition(elementRef: any): boolean;
    closeOnEScape(event: any): void;
    onChange(event: string): void;
    onInput(input: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    onIconClick(): void;
    checkValidity(): boolean;
    validate(c: FormControl): {
        jsonParseError: {
            valid: boolean;
        };
    };
    selectAll(event: any): void;
    onSaveClick(event: any): void;
    navigateUsingKey(event: any): void;
    navigateFilterOptions(previndex: number): void;
    toNavigateFirstAndLastOption(): void;
    checkboxMethod(selectedItem: any): void;
    setMultiSelectData(): void;
    modelCheck(modelValue: any, test: any): void;
    getDisplayText(): void;
    setMultiSelect(): any;
}
