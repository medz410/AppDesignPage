import { DatePipe } from '@angular/common';
import { ChangeDetectorRef, ElementRef, EventEmitter, OnInit, Renderer2 } from '@angular/core';
import { FormControl, Validators } from '@angular/forms';
import { ListBaseDatepickerComponent } from '../../base/list.base.datepicker.component';
export declare class AmexioDateTimePickerComponent extends ListBaseDatepickerComponent<string> implements OnInit, Validators {
    private datePipe;
    element: ElementRef;
    private cdf;
    dateformat: string;
    datepicker: boolean;
    utc: boolean;
    timestamp: boolean;
    xferDateFormat: string;
    hasLabel: boolean;
    timepicker: boolean;
    fieldlabel: string;
    placeholder: string;
    disabled: boolean;
    readonly: boolean;
    minDate: string;
    maxDate: string;
    diabledDate: any[];
    inlineDatepicker: boolean;
    dropdownDatepicker: boolean;
    required: boolean;
    posixUp: boolean;
    positionClass: any;
    change: EventEmitter<any>;
    input: EventEmitter<any>;
    isComponentValid: any;
    inputRef1: any;
    inputRef2: any;
    inputtabindex: number;
    daystabindex: number;
    showToolTip: boolean;
    drop: boolean;
    elementId: string;
    daysTitle: any[];
    tempFlag: boolean;
    curMonth: any;
    hrsArr: any[];
    minArr: any[];
    pickerele: any;
    daysArray: any;
    selectedDate: any;
    hostFlag: boolean;
    dateModel: any;
    isValid: boolean;
    roundedgeclass: string;
    backArrowFlag: boolean;
    forwardArrowFlag: boolean;
    hrs: number;
    min: number;
    viewmode: string;
    okispressed: boolean;
    cancelispressed: boolean;
    dateFormat1: string;
    dateFormat2: string;
    private innerValue;
    private onTouchedCallback;
    private onChangeCallback;
    constructor(datePipe: DatePipe, element: ElementRef, cdf: ChangeDetectorRef, renderer: Renderer2);
    ngOnInit(): void;
    onHrsMinSelect(event: any): void;
    onNgChange(): void;
    private initDaysTitle;
    validateDateModel(): void;
    initModel(): void;
    initdateModel(): void;
    private createDaysForCurrentMonths;
    getFullMonthName(recevieddate: Date): string;
    getHalfMonthName(recDate: Date): string;
    getFullDayName(receiveddate: Date): string;
    onDateClick(dateObj: any, event: any): void;
    formatDatePipe(): void;
    resetSelection(dateObj: any): void;
    onInput(event: any): void;
    nextMonth(event: any): void;
    setDateModel(): void;
    prevMonth(event: any): void;
    nextYear(event: any): void;
    prevYear(event: any): void;
    setDateData(state1: string, mon: number, event: any): void;
    setPlusData(d: any, max: any, mon: any): void;
    setMaxFullYear(d: any, max: any, mon: any): void;
    setMinusData(d: any, min: any, mon: any): void;
    setMinFullYear(d: any, min: any, mon: any): void;
    setDateData1(state1: string, mon: number, event: any): void;
    setToday(): void;
    dateFormatting(): void;
    initDate(): void;
    plus(type: string, event: any): void;
    minus(type: string, event: any): void;
    value: any;
    onBlur(): void;
    writeValue(value: any): void;
    setTimeStamp(): void;
    setInnerValue(): void;
    setUtcInnerValue(): void;
    setdateModelValue(): void;
    validateWriteValue(value: any): void;
    refactorValidate(): void;
    negateisValid(): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    onFocus(elem: any): void;
    onFocusOut(value: any): void;
    setUtc(value: any): void;
    setValue(str: any): void;
    utcOnFocusOut(value: any): void;
    openPicker(elem: any): void;
    setFocus(): void;
    getListPosition(elementRef: any): boolean;
    onSelect(): void;
    validateDays(days: any): boolean;
    private validateMaxDate;
    private disableddays;
    dropdownDatePicker(elem: any): void;
    negateDrop(): void;
    navigateDropdown(): void;
    cancelDropdown(): void;
    arrowClickBack(event: any): void;
    private backArrow;
    alterBackArrow(element: any, min: any): void;
    private resetArrowFlag;
    resetYearFlag(): void;
    private alterBackForwardArrow;
    private forwardArrow;
    chkYearList1(): void;
    rechkYearFlag(): void;
    yearFlagDisable(element: any): void;
    disableYearFlag(): void;
    arrowClickForward(event: any): void;
    minMaxDateFound(): void;
    disableMinMaxYear(element: any, min: any, max: any): void;
    checkValidity(): boolean;
    validate(c: FormControl): {
        jsonParseError: {
            valid: boolean;
        };
    };
    arrowright(day: any, month: any, event: any): void;
    refactoredRightArrow(ismonthchanged: boolean, month: any, drindex: number, currentindex: number): void;
    refactoredFocus(month: any, drindex: number, currentindex: number): void;
    setDateWindowPosition(): void;
    arrowleft(day: any, month: any, event: any): void;
    refactoredarrow(ismonthchanged: boolean, month: any, drindex: number, currentindex: number): void;
    arrowup(day: any, month: any, event: any): void;
    arrowdown(day: any, month: any, event: any): void;
    dropdownListOneArrowDown(currentmonth: any): void;
    onInputChange(event: any): void;
    onInput1Change(event: any): void;
    dropdownListOneArrowUp(currentmonth: any): void;
    dropdownListTwoArrowDown(currentmonth: any): void;
    dropdownListTwoArrowUp(currentmonth: any): void;
    yearList1ArrowDown(currentyear: any): void;
    yearList2ArrowDown(currentyear: any): void;
    yearList1ArrowUp(currentyear: any): void;
    yearList2ArrowUp(currentyear: any): void;
    onTimeClick(event: any): void;
    setRoundEdge(type: any): void;
}
