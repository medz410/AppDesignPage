import { AfterViewInit, ChangeDetectorRef, ElementRef, OnChanges, OnInit, SimpleChanges } from '@angular/core';
export declare class AvailabilityComponent implements OnInit, AfterViewInit, OnChanges {
    cdf: ChangeDetectorRef;
    startDate: string;
    endDate: string;
    startTime: number;
    endTime: number;
    zoneData: any;
    undoFlag: boolean;
    enableDrag: boolean;
    _labelData: any;
    labelData: any[];
    defaultRadio: string;
    nocellchange: boolean;
    elementView: ElementRef;
    elementView1: ElementRef;
    elementView2: ElementRef;
    onClick: any;
    onRadioClick: any;
    UndoBtnClick: any;
    onDragStartEvent: any;
    onDragOverEvent: any;
    onDragEndEvent: any;
    radioValue: string;
    selectedIndexArr: any[];
    styleVar: any;
    completeNewArr: any[];
    datesArrlen: number;
    slotTimeArr: any[];
    sDate: Date;
    eDate: Date;
    dateArr: any[];
    dateArr1: any[];
    completeTimeArr: any[];
    dateSpanHt: number;
    dateSpanWt: number;
    dateSpanlist: any[];
    legendArr: any[];
    dragStartObj: any;
    dragEndObj: any;
    dragFlag: boolean;
    legendObj: {};
    newTimeArr: any[];
    minIndex: number;
    maxIndex: number;
    count: number;
    newTimeArr2: any;
    constructor(cdf: ChangeDetectorRef);
    ngOnInit(): void;
    updateComponent(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnchanges(): void;
    generateData(): void;
    generateSlotTimeArr(): void;
    setSlots1(d: Date): any;
    chkLabels(d: Date, slotArray: any): any;
    setRange(minflag: boolean, maxflag: boolean, slotArray: any, minmaxarr: any, labelelement: any): void;
    availableTimeTest(availableElement: any, slotArray: any, dt: Date, d: Date, minmaxarr: any): {
        minFlag: boolean;
        maxFlag: boolean;
        minmaxArr: any;
    };
    setColorRangeTest(slotArray: any, minmaxarr: any, labelelement: any): void;
    chkMinMaxIndexTest(slotArray: any, dt: Date, d: Date, timeElement: any): {
        minFlag: boolean;
        maxFlag: boolean;
        minIndex: any;
        maxIndex: any;
    };
    getHourMinuteFormat(usertime: number): {
        hours: number;
        minutes: number;
    };
    ngAfterViewInit(): void;
    generateLegendArr(): void;
    alterNoChangeFlag(): void;
    negateNoChangeFlag(): void;
    initializeTimeArr(): void;
    generateTimeArr(): void;
    setTimeArr(startindex: number, endindex: number): void;
    onSelection(radioData: any): void;
    clearColorFlag(): void;
    timeBlockWithoutUndo(parentiterateitem: any, parentindex: any, childiterateitem: any, childindex: any): void;
    timeBlockWithUndo(parentiterateitem: any, parentindex: any, childiterateitem: any, childindex: any): void;
    onTimeBlockClick(parentiterateitem: any, parentindex: any, childiterateitem: any, childindex: any): void;
    onUndoClick(): void;
    onDragStart(event: any, iterate: any, parentindex: any, item: any, childindex: any): void;
    ondragover(event: any, iterate: any, parentindex: any, item: any, childindex: any): void;
    onDragEnd(event: any, iterate: any, parentindex: any, item: any, childindex: any): void;
}
